:javascript
  
  $(document).ready(function() {
  	$('#datatable').dataTable( {
      stateSave: true,
  		"bFilter" : false,
  		"sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
  		"sPaginationType": "bootstrap",
  		"oLanguage": {
  			"sLengthMenu": "#{translate_helper_translate(:_menu__records_per_page)}"
  		}
  	} );
  } );


  $.extend( true, $.fn.dataTable.defaults, {
  	"sDom": "<'row'<'col-sm-6'l><'col-sm-6'f>r>t<'row'<'col-sm-6'i><'col-sm-6'p>>",
  	"sPaginationType": "bootstrap",
  	"oLanguage": {
  		"sLengthMenu": "#{translate_helper_translate(:_menu__records_per_page)}"
  	}
  } );


  $.extend( $.fn.dataTableExt.oStdClasses, {
  	"sWrapper": "dataTables_wrapper form-inline"
  } );


  $.fn.dataTableExt.oApi.fnPagingInfo = function ( oSettings ) {
  	return {
  		"iStart":         oSettings._iDisplayStart,
  		"iEnd":           oSettings.fnDisplayEnd(),
  		"iLength":        oSettings._iDisplayLength,
  		"iTotal":         oSettings.fnRecordsTotal(),
  		"iFilteredTotal": oSettings.fnRecordsDisplay(),
  		"iPage":          oSettings._iDisplayLength === -1 ?
  			0 : Math.ceil( oSettings._iDisplayStart / oSettings._iDisplayLength ),
  		"iTotalPages":    oSettings._iDisplayLength === -1 ?
  			0 : Math.ceil( oSettings.fnRecordsDisplay() / oSettings._iDisplayLength )
  	};
  };

  $.extend( $.fn.dataTableExt.oPagination, {
  	"bootstrap": {
  		"fnInit": function( oSettings, nPaging, fnDraw ) {
  			var oLang = oSettings.oLanguage.oPaginate;
  			var fnClickHandler = function ( e ) {
  				e.preventDefaultranslate_helper_translate();
  				if ( oSettings.oApi._fnPageChange(oSettings, e.data.action) ) {
  					fnDraw( oSettings );
  				}
  			};
  
  			$(nPaging).addClass('pagination').append(
  				'<ul>'+
  					'<li class="prev disabled"><a href="#">&larr; '+oLang.sPrevious+'</a></li>'+
  					'<li class="next disabled"><a href="#">'+oLang.sNext+' &rarr; </a></li>'+
  				'</ul>'
  			);
  			var els = $('a', nPaging);
  			$(els[0]).bind( 'click.DT', { action: "previous" }, fnClickHandler );
  			$(els[1]).bind( 'click.DT', { action: "next" }, fnClickHandler );
  		},
  
  		"fnUpdate": function ( oSettings, fnDraw ) {
  			var iListLength = 5;
  			var oPaging = oSettings.oInstance.fnPagingInfo();
  			var an = oSettings.aanFeatures.p;
  			var i, ien, j, sClass, iStart, iEnd, iHalf=Math.floor(iListLength/2);
  
  			if ( oPaging.iTotalPages < iListLength) {
  				iStart = 1;
  				iEnd = oPaging.iTotalPages;
  			}
  			else if ( oPaging.iPage <= iHalf ) {
  				iStart = 1;
  				iEnd = iListLength;
  			} else if ( oPaging.iPage >= (oPaging.iTotalPages-iHalf) ) {
  				iStart = oPaging.iTotalPages - iListLength + 1;
  				iEnd = oPaging.iTotalPages;
  			} else {
  				iStart = oPaging.iPage - iHalf + 1;
  				iEnd = iStart + iListLength - 1;
  			}
  
  			for ( i=0, ien=an.length ; i<ien ; i++ ) {
  				// Remove the middle elements
  				$('li:gtranslate_helper_translate(0)', an[i]).filter(':notranslate_helper_translate(:last)').remove();
  
  				// Add the new list items and their event handlers
  				for ( j=iStart ; j<=iEnd ; j++ ) {
  					sClass = (j==oPaging.iPage+1) ? 'class="active"' : '';
  					$('<li '+sClass+'><a href="#">'+j+'</a></li>')
  						.insertBefore( $('li:last', an[i])[0] )
  						.bind('click', function (e) {
  							e.preventDefaultranslate_helper_translate();
  							oSettings._iDisplayStart = (parseIntranslate_helper_translate($('a', this).textranslate_helper_translate(),10)-1) * oPaging.iLength;
  							fnDraw( oSettings );
  						} );
  				}
  
  				// Add / remove disabled classes from the static elements
  				if ( oPaging.iPage === 0 ) {
  					$('li:first', an[i]).addClass('disabled');
  				} else {
  					$('li:first', an[i]).removeClass('disabled');
  				}
  
  				if ( oPaging.iPage === oPaging.iTotalPages-1 || oPaging.iTotalPages === 0 ) {
  					$('li:last', an[i]).addClass('disabled');
  				} else {
  					$('li:last', an[i]).removeClass('disabled');
  				}
  			}
  		}
  	}
  } );
