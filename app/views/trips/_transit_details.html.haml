= render partial: 'provider_and_cost_comments', locals: {itinerary: itinerary}

%table
  %tr
    %td.itinerary_icons
      %i.fa.fa-play.mode_icon_formatting{:class => 'start_icon'}
    %td.itin_text_container
      .itinerary_text
        = translate_helper(:start) + itinerary.trip_part.from_trip_place.name
      .itinerary_text_small
        = format_time(itinerary.start_time.in_time_zone)

  - itinerary.get_legs.each do |leg|
    %tr
      %td.itinerary_icons{style: 'position:absolute;left:0;'}
        - if leg.respond_to? :agency_id and not leg.agency_id.nil?
          %img{:src => get_service_provider_icon(leg.agency_id, leg.mode), alt: "#{leg.mode.downcase} Mode Icon"}
        - else
          %img{:src => get_mode_icon(leg.mode), alt: "#{leg.mode.downcase} Mode Icon"}
      %td.itin_text_container
        .itinerary_text
          - if leg.mode == Leg::CAR || leg.mode == Leg::BICYCLE || leg.mode == Leg::WALK
            = leg.trip_steps
          - else
            = leg.short_description
            
          - if leg.mode == Leg::WALK
            - sidewalk_obstructions = query_sidewalk_feedback_near_one_walk_leg(leg)
            - if sidewalk_obstructions.length > 0
              %br
              = translate_helper(:sidewalk_obstructions) + ':'
              %br
              %div{style:'padding-left: 10px;'}
                - sidewalk_obstructions.each do |f|
                  = f.comment
                  - unless f.removed_at.nil?
                    = ', ' + translate_helper(:removed_at).downcase + ' ' + format_date(f.removed_at)
                  %br
        .itinerary_text_small
          = format_time(leg.start_time) + ' ' + translate_helper(:to) + ' ' + format_time(leg.end_time)
          - if leg.mode == Leg::WALK
            = ', ' + exact_distance_to_words(leg.distance)
  %tr
    %td.itinerary_icons
      %i.fa.fa-stop.mode_icon_formatting{:class => 'end_icon'}
    %td.itin_text_container
      .itinerary_text
        = translate_helper(:arrive) + itinerary.trip_part.to_trip_place.name
      .itinerary_text_small
        = format_time(itinerary.end_time.in_time_zone)
