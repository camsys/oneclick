- content_for :title, "#{translate_helper_translate(:site_title)} - #{translate_helper_translate(:plan_a_trip)}"
- content_for :head do
  = javascript_include_tag "//cdnjs.cloudflare.com/ajax/libs/d3/3.4.4/d3.min.js"
.row
  .col-sm-12#action_header
    .pull-right
      - if SatisfactionSurvey.enabled?
        - unless SatisfactionSurvey.find_by(trip_id: @trip.id)
          %button#open_survey.btn.action-button{"data-toggle" => "modal", "data-target" => "#satisfaction_survey"}
            %i.fa.fa-thumbs-up
            %i.fa.fa-thumbs-down.fa-flip-horizontal
            = translate_helper_translate(:feedback)
      - else
        = link_to new_rating_from_email_user_trip_path(user_id: @trip.user_id, id: @trip.id, :hash => @trip.md5_hash, taken: false), class: "btn action-button", style: "margin-right:5px;", tabindex: "7" do
          = translate_helper_translate(:feedback)
      = button_tag :type => 'button', :name => "planButton", :class => "btn action-button", tabindex: "8" do
        =translate_helper_translate(:next)
    = render partial: 'shared/trip_plan_breadcrumbs'

.row
- if @tripResponseHash['status'] == 0
  - # flash handles it
- else
  .col-sm-12
    = render partial: 'shared/page_comments', locals: {key: :review_header_comment}
  #reviewBaseContainer.row
    .col-xs-12.form-group.hidden-md-lg
      %label.mobile-checkbox{for: 'legendCheckbox', style: 'margin-right: 5px;'}
        %input.mobile-input-checkbox{type:'checkbox',id:'legendCheckbox',"aria-labelledby"=>"legendCheckbox-label", "aria-describedby"=>"legendCheckbox-description"}
        .mobile-checkbox__checkmark
        %span{id:'legendCheckbox-label'}
        = translate_helper_translate(:legends)
      %label.mobile-checkbox{for: 'filterCheckbox'}
        %input.mobile-input-checkbox{type:'checkbox',id:'filterCheckbox',"aria-labelledby"=>"filterCheckbox-label", "aria-describedby"=>"filterCheckbox-description"}
        .mobile-checkbox__checkmark
        %span{id:'filterCheckbox-label'}
        = translate_helper_translate(:filters)

    #accessoryContainer.col-md-3.col-xs-12
    / end of filter column
    .col-md-9
      #tripContainer.col-xs-12{style: "padding: 0px;", :role => "main", :aria => {:label => 'Review Your Trip'}}
      / end of trip container
  .col-xs-12#action_footer{style: "margin-bottom: 5px;padding: 0px;"}
    .pull-right
      = link_to new_rating_from_email_user_trip_path(user_id: @trip.user_id, id: @trip.id, :hash => @trip.md5_hash, taken: false), class: "btn action-button", style: "margin-right:5px;" do
        = translate_helper_translate(:feedback)
      = button_tag :type => 'button', :name => "planButton", :class => "btn action-button" do
        =translate_helper_translate(:next)
  .col-sm-12
    = render partial: 'shared/page_comments', locals: {key: :review_footer_comment}
  / end of review columns
  #itinerary_modal.modal.modal-fullscreen.fade{"role" => "dialog", "data-back" => "static", "tabindex" => "-1", "aria-hidden" => "true"}

  - if SatisfactionSurvey.enabled?
    - unless SatisfactionSurvey.find_by(trip_id: @trip.id)
      #satisfaction_survey.modal.fade{"role" => "dialog", "data-back" => "static", "tabindex" => "-1", "aria-hidden" => "true"}
        .modal-dialog
          .modal-content
            .modal-header
              = translate_helper_translate(:feedback)
            .modal-body
              = render "satisfaction_surveys/form"

  :javascript
    $(function() {
      var getConfigValue = function(config) {

      };
      //default configured min&max values for filters
      var filterConfigs = {
        default_min_duration: #{Oneclick::Application.config.default_min_duration || "null"},
        default_max_duration: #{Oneclick::Application.config.default_max_duration || "null"},
        default_min_transfers: #{Oneclick::Application.config.default_min_transfers || "null"},
        default_max_transfers: #{Oneclick::Application.config.default_max_transfers || "null"},
        default_min_fare: #{Oneclick::Application.config.default_min_fare || "null"},
        default_max_fare: #{Oneclick::Application.config.default_max_fare || "null"},
        default_min_walk_dist: 0,
        default_max_walk_dist: #{@max_walk_dist_value || "null"},
        default_min_wait_time: 0,
        default_max_wait_time: #{@max_wait_time || "null"},
        default_min_paratransit_count:0,
        default_max_paratransit_count: #{@max_paratransit_count || "null"},
        current_user_accommodations: #{@current_user_accommodations}
      };

      //update date names in localized texts for moment js lib
      var localeLang = '#{I18n.locale}';
      if(localeLang.toLowerCase() != 'en' && localeLang.toLowerCase() != 'tags') { //override moment lang if not english
        var weekdays = #{I18n.translate_helper_translate('date.day_names')};
        if(weekdays instanceof Array && weekdays.length > 0) {
          moment.lang(localeLang, {
            weekdays : weekdays
            });
        }
        var weekdaysShort = #{I18n.translate_helper_translate('date.abbr_day_names')};
        if(weekdaysShort instanceof Array && weekdaysShort.length > 0) {
          moment.lang(localeLang, {
            weekdaysShort : weekdaysShort
            });
        }
        var months = #{I18n.translate_helper_translate('date.month_names')};
        if(months instanceof Array && months.length > 0) {
          moment.lang(localeLang, {
            months : months
            });
        }
        var monthsShort = #{I18n.translate_helper_translate('date.abbr_month_names')};
        if(monthsShort instanceof Array && monthsShort.length > 0) {
          moment.lang(localeLang, {
            monthsShort : monthsShort
            });
        }
      }

      //include all possible localized words to be used in review.js
      var localeDictFinder = {
        failed_to_update_profile: '#{translate_helper_translate(:failed_to_update_profile)}',
        select_a_plan_each_trip_part: '#{translate_helper_translate(:select_a_plan_each_trip_part)}',
        update: '#{translate_helper_translate(:update)}',
        cancel: '#{translate_helper_translate(:cancel)}',
        select: '#{translate_helper_translate(:select)}',
        sort_by: '#{translate_helper_translate(:sort_by)}',
        travel_time: '#{translate_helper_translate(:travel_time)}',
        travel_time_sorter: '#{translate_helper_translate(:travel_time_sorter)}',
        trip_time: '#{translate_helper_translate(:trip_time_filter)}',
        trip_time_help: '#{translate_helper_translate(:trip_time_help)}',
        wait_time: '#{translate_helper_translate(:wait_time_filter)}',
        wait_time_sorter: '#{translate_helper_translate(:wait_time_sorter)}',
        wait_time_help: '#{translate_helper_translate(:wait_time_help)}',
        arrival_time: '#{translate_helper_translate(:arrival_time)}',
        arrival_time_sorter: '#{translate_helper_translate(:arrival_time_sorter)}',
        departure_time: '#{translate_helper_translate(:departure_time)}',
        departure_time_sorter: '#{translate_helper_translate(:departure_time_sorter)}',
        depart_at: '#{translate_helper_translate(:depart_at)}',
        arrive_in: '#{translate_helper_translate(:arrive_in)}',
        departing_at: '#{translate_helper_translate(:departing_at)}',
        arriving_by: '#{translate_helper_translate(:arriving_by)}',
        fare: '#{translate_helper_translate(:fare)}',
        fare_filter: '#{translate_helper_translate(:fare_filter)}',
        fare_sorter: '#{translate_helper_translate(:fare_sorter)}',
        fare_help: '#{translate_helper_translate(:fare_help)}',
        number_of_transfers: '#{translate_helper_translate(:number_of_transfers_filter)}',
        number_of_transfers_help: '#{translate_helper_translate(:number_of_transfers_help)}',
        modes: '#{translate_helper_translate(:modes_filter)}',
        modes_help: '#{translate_helper_translate(:modes_help)}',
        number_of_paratransit_count: '#{translate_helper_translate(:number_of_paratransit_count_filter)}',
        number_of_paratransit_count_help: '#{translate_helper_translate(:number_of_paratransit_count_help)}',
        walk: '#{translate_helper_translate(:mode_walk_name)}',
        rideshare: '#{translate_helper_translate(:mode_rideshare_name)}',
        paratransit: '#{translate_helper_translate(:mode_paratransit_name)}',
        taxi: '#{translate_helper_translate(:mode_taxi_name)}',
        transit: '#{translate_helper_translate(:mode_transit_name)}',
        bus: '#{translate_helper_translate(:mode_bus_name)}',
        ferry: '#{translate_helper_translate(:mode_ferry_name)}',
        cable_car: '#{translate_helper_translate(:mode_cable_car_name)}',
        funicular: '#{translate_helper_translate(:mode_funicular_name)}',
        gondola: '#{translate_helper_translate(:mode_gondola_name)}',
        bikeshare: '#{translate_helper_translate(:mode_bikeshare_name)}',
        subway: '#{translate_helper_translate(:mode_subway_name)}',
        tram: '#{translate_helper_translate(:mode_tram_name)}',
        rail: '#{translate_helper_translate(:mode_rail_name)}',
        bicycle: '#{translate_helper_translate(:mode_bicycle_name)}',
        drive: '#{translate_helper_translate(:mode_car_name)}',
        car: '#{translate_helper_translate(:mode_car_name)}',
        wait: '#{translate_helper_translate(:wait)}',
        transfer: '#{translate_helper_translate(:transfer)}',
        trip_restrictions: '#{translate_helper_translate(:trip_restrictions)}',
        minutes: '#{translate_helper_translate(:minutes)}',
        minute_abbr: '#{translate_helper_translate(:minute_abbr)}',
        unknown: '#{translate_helper_translate(:unknown)}',
        no_itineraries_found: '#{translate_helper_translate(:no_itineraries_found)}',
        something_went_wrong: '#{translate_helper_translate(:something_went_wrong)}',
        press_space_or_dblclick_for_details: '#{translate_helper_translate(:press_space_or_dblclick_for_details)}',
        press_space_for_details: '#{translate_helper_translate(:press_space_for_details)}',
        four_digit_year: '#{translate_helper_translate(:four_digit_year)}',
        miles: '#{translate_helper_translate(:miles)}',
        legend: '#{translate_helper_translate(:legend)}',
        legend_help: '#{translate_helper_translate(:legend_help)}',
        walk_dist: '#{translate_helper_translate(:walk_distance_filter)}',
        walk_dist_sorter: '#{translate_helper_translate(:walk_distance_sorter)}',
        walk_dist_help: '#{translate_helper_translate(:walk_distance_help)}',
        trip_outbound_help: '#{translate_helper_translate(:trip_outbound_help)}',
        trip_return_help: '#{translate_helper_translate(:trip_return_help)}',
        outbound: '#{translate_helper_translate(:outbound)}',
        return: '#{translate_helper_translate(:return)}',
        to: '#{translate_helper_translate(:to)}',
        from: '#{translate_helper_translate(:from)}',
        accommodations: '#{translate_helper_translate(:accommodations_filter)}',
        accommodations_help: '#{translate_helper_translate(:accommodations_help)}',
        did_not_take_feedback_prompt: "#{translate_helper_translate(:did_not_take_feedback_prompt)}",
        stay_on_page: '#{translate_helper_translate(:stay_on_page)}'
      };

      //show or hide legends
      $('#legendCheckbox').on('change', function(e) {
        var $legendDiv = $('#legendDiv');
        if($legendDiv.hasClass('hidden-xs-sm')) {
          $('#legendDiv').removeClass('hidden-xs-sm');
        } else {
          $('#legendDiv').addClass('hidden-xs-sm');
        }
        e.preventDefault();
      });

      //show or hide filters
      $('#filterCheckbox').on('change', function(e) {
        var $filterDiv = $('#filterDiv');
        if($filterDiv.hasClass('hidden-xs-sm')) {
          $('#filterDiv').removeClass('hidden-xs-sm');
        } else {
          $('#filterDiv').addClass('hidden-xs-sm');
        }
        e.preventDefault();
      });

      var tripResponse = #{@tripResponse.to_json};
      var pageRenderer = new TripReviewPageRenderer(30, 20, tripResponse, filterConfigs, localeDictFinder);
      pageRenderer.processTripResponse();

      $('#itinerary_modal').on('shown.bs.modal', function() {
        $('.popover').hide();
        if(typeof(CsMaps) === 'object' && CsMaps != null && CsMaps.review_map != null) {
          var mapObj = CsMaps.review_map;
          mapObj.invalidateMap();
          var mapMarkers = mapObj.LMmarkers;
          var mapBounds = null;
          if(mapMarkers.length > 0) {
            mapBounds = mapObj.calcMapBounds(mapMarkers);
          } else {
            mapBounds = mapObj.LMbounds;
          }

          if(mapBounds) {
            mapObj.LMmap.fitBounds(mapBounds);
          }
        }
      });

      $('#itinerary_modal').on('hidden.bs.modal', function() {
        var itinId = $(this).find('.modal-dialog').attr('data-itinerary-id');
        var $chartContainer = $('.single-plan-review[data-plan-id=' + itinId + '] .single-plan-chart-container');
        $chartContainer.focus();
        $('html, body').animate({
            scrollTop: ($chartContainer.offset().top - 100)
        }, 500);
      });

      //Plan button to jump to Plan page
      $('button[name=planButton]').on('click', function(e) {
        var selectedPlanIds = [];
        var tripParts = $('#tripContainer').find('.single-trip-part');
        var selectedPlans = tripParts.find('.single-plan-selected');
        if(tripParts.length != selectedPlans.length) {
          show_alertranslate_helper_translate(localeDictFinder['select_a_plan_each_trip_part']);
          return;
        }

        var selectedPlanIds = [];
        selectedPlans.each(function() {
          var tmpPlanId = parseIntranslate_helper_translate($(this).attr('data-plan-id'));
          if(typeof(tmpPlanId) === 'number' && !isNaN(tmpPlanId)) {
            selectedPlanIds.push(tmpPlanId);
          }
        });

        //jump to Plan page
        window.location.href = ( window.location.href + '/plan?itinids=' + selectedPlanIds.toString() );
      });

      $("#save_survey").click(function(){
        $.ajax({
          type: "POST",
          url: '/satisfaction_surveys',
          data: {satisfaction_survey: 
                  { 'trip_id': $('#satisfaction_survey_trip_id').val(),
                    'satisfied': $('#satisfaction_survey input:checked').val(),
                    'comment': $('#satisfaction_survey_comment').val()
                  }
          },
          success: function() {
            $('#satisfaction_survey .modal-header').remove();
            $('#satisfaction_survey .modal-dialog').addClass('modal-sm');
            $('#satisfaction_survey .modal-body').empty().addClass('text-center').append("<strong>#{translate_helper_translate(:success)}</strong>");
            setTimeoutranslate_helper_translate(function(){
              $('#satisfaction_survey').modal('hide');
            }, 1000);
          },
          dataType: 'json'
        });
      });
    });

    $('#itinerary_modal').on('show.bs.modal', function(){
      differentiateTurnByTurn("false");
    });

    $('#tripContainer').tooltip({selector: '.trip-mode-cost div'})
