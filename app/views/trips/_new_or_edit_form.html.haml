- content_for :title, "#{translate_helper_translate(:site_title)} - #{translate_helper_translate(:plan_a_trip)}"
- is_splash_available = whether_show_tranlatation_item?(:splash)
- non_splash_css = 'col-sm-12'
- splash_css = ''
- if is_splash_available
  - non_splash_css = 'col-sm-7 col-xs-12'
  - splash_css = 'col-sm-5 col-xs-12'
.row
  %div{class: non_splash_css}
    .pull-right
      -if @show_booking
        = button_tag :type => 'submit', :name => 'ecolaneSignin', :class => "btn action-button", :style => "margin-right: 10px;"  do
          =translate_helper_translate(:ecolane_login_button)
          :javascript
            $(function() {
              $('button[name=ecolaneSignin]').click(function() {
                $('#bookingSignupModal').modal('show');
              });
            });
      = button_tag :type => 'submit', :name => 'planTrip', :class => "btn action-button" do
        =translate_helper_translate(:next)
        :javascript
          $(function() {
            $('button[name=planTrip]').click(function() {
              $('.plan-a-trip').submitranslate_helper_translate();
            });
          });
    = render partial: 'shared/trip_plan_breadcrumbs'
.row
  - is_splash_available = whether_show_tranlatation_item?(:splash)
  - non_splash_css = 'col-sm-12'
  - splash_css = ''
  - if is_splash_available
    - non_splash_css = 'col-sm-7 col-xs-12'
    - splash_css = 'col-sm-5 col-xs-12'
  %div{class: non_splash_css}
    .col-sm-12
      - header_comment_key = session[:is_multi_od] ? :multi_od_trip_header_comment : :trip_header_comment
      = render partial: 'shared/page_comments', locals: {key: header_comment_key}
    .col-sm-12.panel.panel-default{:role => "main", :aria => {:label => 'Trip Form'}, :style => 'padding:0px;'}
      .panel-heading
        %h2.panel-title
          =translate_helper_translate(:trip_parameters)
          = add_tooltip("trip_parameters_help")
      .panel-body
        = simple_form_for @trip_proxy, :url => @trip_proxy.id.nil? ? user_trips_path(:user_id => @traveler.id) : user_trip_path(:user_id => @traveler.id), :method => @trip_proxy.id.nil? ? 'post' : 'put', :html => {:class => "plan-a-trip form-horizontal no-bottom-margin", :style => "margin-top:10px;margin-bottom:0px;"}, wrapper: :horizontal_form, wrapper_mappings: {check_boxes: :horizontal_radio_and_checkboxes, radio_buttons: :plan_trip_radio}  do |f|
          = f.hidden_field :mode
          = f.hidden_field :from_place_object, :id => "from_place_object"
          = f.hidden_field :to_place_object, :id => "to_place_object"
          = f.hidden_field :map_center, id: "map_center"
          = f.hidden_field :multi_origin_places, id: "multi_origin_places"
          = f.hidden_field :multi_dest_places, id: "multi_dest_places"
          = f.hidden_field :trip_token, id: "trip_token"
          = f.hidden_field :agency_token, id: "agency_token"

          %fieldset
            #tripOptions
              .form-group.radio_buttons.optional.trip_proxy_is_round_trip
                %legend.col-sm-3.radio_buttons.optional.control-label#legend_label
                  =translate_helper_translate(:trip_dir)
                  = add_tooltip("trip_dir_help")
                .col-sm-9#is_round_trip_inputs
                  %input.radio_buttons.optional#trip_proxy_is_round_trip_1{name: "trip_proxy[is_round_trip]", type: "radio", value: 1, checked: (@trip_proxy.is_round_trip ? "checked" : nil)}
                  %label.radio_buttons.optional{for: "trip_proxy_is_round_trip_1"} #{translate_helper_translate(:round_trip)}

                  %input.radio_buttons.optional#trip_proxy_is_round_trip_0{name: "trip_proxy[is_round_trip]", type: "radio", value: 0, checked: (@trip_proxy.is_round_trip ? nil : "checked")}
                  %label.radio_buttons.optional{for: "trip_proxy_is_round_trip_0"} #{translate_helper_translate(:one_way)}

            = field_set_tag do
              / .inline-radio
              /   = f.input :is_round_trip, as: :radio_buttons, label: translate_helper_translate(:trip_dir), collection: [[translate_helper_translate(:round_trip), 1], [translate_helper_translate(:one_way), 0]], checked: (@trip_proxy.is_round_trip ? "1" : "0")

              :javascript
                $('#tripOptions :radio').change(function() {
                  if(this.value === '0') {
                    $('#returnDatetimeOptions').hide();
                  } else {
                    $('#returnDatetimeOptions').show();
                  }
                });

          %fieldset
            #baseModes
              .form-group.check_boxes.optional.trip_proxy_modes
                %legend.col-sm-3.check_boxes.optional.control-label#legend_label
                  =translate_helper_translate(:modes)
                  = add_tooltip("modes_help")
                .col-sm-9#modes_inputs
                  - @modes.each do |mode|
                    %div
                      %input.check_boxes.optional{id: "trip_proxy_modes_#{mode[1]}", name: "trip_proxy[modes][]", type: "checkbox", value: "#{mode[1]}", checked: (@selected_modes.include?(mode[1]) ? "checked" : nil)}
                      %label.check_boxes.optional{for: "trip_proxy_modes_#{mode[1]}", name: "trip_proxy[modes]"} #{mode[0]}
                      %br

            = field_set_tag do
              / = f.input :modes, as: :check_boxes, collection: @modes, label_method: :first, value_method: :last, checked: @selected_modes, label: translate_helper_translate(:modes)

            :javascript
              $('#trip_proxy_modes_mode_transit').change(function() {
                if(this.checked) {
                  $('#transitModes input[type="checkbox"]').each(function() {
                      this.checked = true;
                  });
                } else {
                  $('#transitModes input[type="checkbox"]').each(function() {
                      this.checked = false;
                  });
                }
              });

            #transitModes
              = f.input :modes, as: :check_boxes, collection: @transit_modes, label_method: :first, value_method: :last, checked: @selected_modes, label: '', collection_wrapper_class: 'col-xs-offset-1', collection_wrapper_tag: :div

              :javascript
                $('#transitModes input[type="checkbox"]').change( function() {
                  var checkedCount = $('#transitModes input:checked').length;
                  if (checkedCount === 0) {
                    $("#trip_proxy_modes_mode_transit").prop('checked', false);
                  } else {
                    $("#trip_proxy_modes_mode_transit").prop('checked', true);
                  }
                });

          -if I18n.locale == :tags
            = f.input :trip_purpose_id, :collection =>  TripPurpose.all.map{|x| [{code: x.code, name: x.name}, x.id]}, :selected => @trip_proxy.trip_purpose_id, :value => :id, :label_method => lambda { |v| translate_helper_translate(v[0][:name])}, label: translate_helper_translate(:trip_purposes), input_html: { class: 'form-control' }
            - if translation_exists?("trip_purposes_help")
              :javascript
                addHelperTooltip('#trip_purpose_id_label', "#{translate_helper_translate(:trip_purposes_help)}");
          -else
            = f.input :trip_purpose_id, :collection => TripPurpose.ordered_by_localized_name.map{|x| [{code: x.code, name: x.name}, x.id]}, :selected => @trip_proxy.trip_purpose_id, :value => :id, :label_method => lambda { |v| translate_helper_translate(v[0][:name])}, label: translate_helper_translate(:trip_purposes), input_html: { class: 'form-control' }
            - if translation_exists?("trip_purposes_help")
              :javascript
                addHelperTooltip('#trip_purpose_id_label', "#{translate_helper_translate(:trip_purposes_help)}");

          = render partial: 'location_input', locals: {dir: 'from', f: f}
          = render partial: 'location_input', locals: {dir: 'to', f: f}

          .form-group
            = render partial: 'date_time_input', locals: {dir: 'outbound', f: f}

          #returnDatetimeOptions{style: (@trip_proxy.is_round_trip ? '' : 'display: none;')}
            .form-group
              = render partial: 'date_time_input', locals: {dir: 'return', f: f}
          .hidden-xs.hidden-sm{id: "tripMapContainer", class: 'hide', style: 'position: absolute; top: 0; right:-520px; z-index: 1000;'}
            .panel.panel-default{style:'padding:0px;'}
              .panel-heading.clearfix
                %h2.panel-title
                  %button#mapCloseButton.close.pull-right{type: "button", title: translate_helper_translate(:close)}
                    %i.fa.fa-close
                    %span.hide Close
                  %button.pull-right.close{type: 'button', "data-toggle" => "modal", "data-target" => "#mapExpand", style: "min-width:1em;margin-right:10px;margin-top:2px;", aria: {label: "Map"}}
                    %i.fa.fa-expand

                  =translate_helper_translate(:map)
                  = add_tooltip("map_help")
                  :javascript
                    $('#tripMapContainer .label-help').removeClass('pull-right fa-2x');
              .panel-body{:"aria-hidden" => "true"}
                = LeafletMap({ :mapid => "tripMap", :markers => @markers, :tile_provider => 'GOOGLEMAP', :min_zoom => 3, :max_zoom => 15, :class => "map", width: '500px;', :style => "height: 400px; width: 500px;", :show_location_select => true })
    .col-sm-12{style: "margin-bottom: 5px; padding: 0px;"}
      .pull-right
        -if @show_booking
          = button_tag :type => 'submit', :name => 'ecolaneSignin', :class => "btn action-button", :style => "margin-right: 10px;" do
            =translate_helper_translate(:ecolane_login_button)
        = button_tag :type => 'submit', :name => 'planTrip', :class => "btn action-button" do
          =translate_helper_translate(:next)

      .pull-left
        %button.btn.btn-default.generate-url{type: 'button', "data-toggle" => "modal", "data-target" => "#generatedUrl", style: "min-width:1em;", aria: {label: "Generate a URL to your current trip."}}
          %i.fa.fa-link

      #generatedUrl.modal.fade{tabindex: "-1", role: "dialog", aria: {labelledby: "modalLabel1", hidden: "true"}}
        .modal-dialog
          .modal-content.panel.panel-default
            .modal-header.panel-heading
              %button.close{type: "button", data: {dismiss: "modal"}}
                %span{aria: {hidden: "true"}}
                  %i.fa.fa-close
                %span.sr-only Close
              %h3.modal-title{id: "modalLabel1"} URL for Your Trip
            .modal-body
              = text_area_tag "trip-url", nil, rows: 10, class: 'form-control'
            .modal-footer{style: "background-color:whitesmoke;"}
              %button.btn.action-button{type: "button", data: {dismiss: "modal"}} Close

      #mapExpand.modal.modal-fullscreen.new-trip-modal.fade{tabindex: "-1", role: "dialog", aria: {labelledby: "modalLabel2", hidden: "true"}}
        .modal-dialog.modal-lg
          .modal-content.panel.panel-default{style: "margin-bottom:1px;padding:0;"}
            .modal-header.panel-heading
              %button.close.close_all{type: "button", style: "margin-right:5px;margin-top:3px;", data: {dismiss: "modal"}}
                %span{aria: {hidden: "true"}}
                  %i.fa.fa-close
                %span.sr-only Close
              %button.close{type: "button", style: "margin-right:10px;margin-top:3px;", data: {dismiss: "modal"}}
                %span{aria: {hidden: "true"}}
                  %i.fa.fa-compress
                %span.sr-only Minimize
              %h3.modal-title{id: "modalLabel2"}
                = translate_helper_translate(:map)
            .modal-body{:"aria-hidden" => "true"}
              = LeafletMap({ :mapid => "expandedMap", :markers => @markers, :tile_provider => 'GOOGLEMAP', :min_zoom => 3, :max_zoom => 15, :class => "map", :style => "height: 100%; width: 100%;", :show_location_select => true })



        :javascript
          // button to show trip page url
          $('.generate-url').click(function(){

            modes = $("#modes_inputs input[type='checkbox'], #transitModes input[type='checkbox']");
            modesArray = [];
            for (i=0; i < modes.length; i++) { if ($(modes[i]).prop('checked')) { z = $(modes[i]).val(); modesArray.push(z); } }

            var isRoundTrip = $('#trip_proxy_is_round_trip_1').prop('checked') ? "true" : "false";
            var checkedModes = modesArray.join(",");
            var tripPurpose = $('#trip_proxy_trip_purpose_id > option:selected').attr('code');
            var fromPlace = $('#trip_proxy_from_place').val().replace(/(,)/g,'%2c').replace(/\s/g,"%20").replace(/(&)/g,"%26");
            var toPlace = $('#trip_proxy_to_place').val().replace(/(,)/g,'%2c').replace(/\s/g,"%20").replace(/(&)/g,"%26");
            var outboundDate = $('#trip_proxy_outbound_trip_date').val();
            var outboundTime = $('#trip_proxy_outbound_trip_time').val().replace(/\s/g,'');
            var returnDate = $('#trip_proxy_return_trip_date').val();
            var returnTime = $('#trip_proxy_return_trip_time').val().replace(/\s/g,'');
            var outboundArriveDepart = $('#trip_proxy_outbound_arrive_depart > option:selected').val();
            var returnArriveDepart = $('#trip_proxy_return_arrive_depart > option:selected').val();

            var completeUrl = "#{root_url}/" +
            "plan_a_trip?is_round_trip=" + isRoundTrip +
            "&modes=" + checkedModes +
            "&purpose=" + tripPurpose +
            "&from_place=" + fromPlace +
            "&to_place=" + toPlace +
            "&outbound_trip_date=" + outboundDate +
            "&outbound_trip_time=" + outboundTime +
            "&outbound_arrive_depart=" + outboundArriveDepart;

            if (isRoundTrip == "true") {
              completeUrl += 
              "&return_trip_date=" + returnDate +
              "&return_trip_time=" + returnTime +
              "&return_arrive_depart=" + returnArriveDepart;
            }
            
            $('#trip-url').val(completeUrl);
            
          });

    .col-sm-12
      - footer_comment_key = session[:is_multi_od] ? :multi_od_trip_footer_comment : :trip_footer_comment
      = render partial: 'shared/page_comments', locals: {key: footer_comment_key}
  - if is_splash_available
    = render partial: 'shared/splash', locals: {splash_key: :splash, title_key: :splash_title, splash_div_class: splash_css}
  -if @show_booking
    = render partial: 'booking_signup'
:javascript
  $(function() {
    // initialize place picker
    var geocoder_bounds = #{Rails.application.config.geocoder_bounds};
    var bounds_hash = null;
    if(geocoder_bounds) {
      bounds_hash = {
        xmin: geocoder_bounds[0][0],
        ymin: geocoder_bounds[0][1],
        xmax: geocoder_bounds[1][0],
        ymax: geocoder_bounds[1][1]
      }
    }
    init_place_picker(
      ".plan-a-trip .place_picker", 
      bounds_hash
    );
          
    var makeFullscreen = function(){
      var minMapHeight = 200;
      var newMainHeight = $(window).outerHeightranslate_helper_translate(true);
      var mapHeaderHeight = $('.modal-fullscreen .modal-header').outerHeightranslate_helper_translate(true);
      var newMapHeight = newMainHeight - mapHeaderHeight;
      if (newMapHeight < minMapHeight) {
        newMapHeight = minMapHeight;
        newMainHeight = newMapHeight + mapHeaderHeight;
      }
      $('.modal-fullscreen').heightranslate_helper_translate(newMainHeight);
      $('#expandedMap').heightranslate_helper_translate(newMapHeight - 5);
    }

    $('#mapExpand').on('shown.bs.modal', function() {
      makeFullscreen();

      if(typeof(CsMaps) === 'object' && CsMaps != null && CsMaps.expandedMap != null) {
        var smallMap = CsMaps.tripMap;
        var mapObj = CsMaps.expandedMap;
        var mapMarkers = smallMap.LMmarkers;
        var mapBounds = null;

        mapObj.invalidateMap();

        if(mapMarkers.length > 0) {
          mapObj.removeMarkers();
          for (var mark in mapMarkers) {
            mapObj.LMmarkers.push(L.marker([mapMarkers[mark]._latlng.lat, mapMarkers[mark]._latlng.lng], mapMarkers[mark].options));
          }
          mapBounds = mapObj.calcMapBounds(mapMarkers);
        } else {
          mapBounds = mapObj.LMbounds;
        }

        if(mapBounds) {
          setTimeoutranslate_helper_translate(function(){
            mapObj.LMmap.fitBounds(mapBounds);
            mapObj.refreshMarkers();
          }, 10);
        }
      }
    });

    $(window).on('load resize', function(){
      makeFullscreen();
    });

    $('.close_all').click(function(){
      $('#mapCloseButton').click();
    });

    $('.plan-a-trip').on('submit',function() {
      var hiddenFromPlaceData = $('#from_place_object').val();
      var fromPlaceAddr = $('#trip_proxy_from_place').val();
      if(fromPlaceAddr.length === 0) {
        fromPlaceAddr = $('#trip_proxy_from_place').attr('last-multi-od-value') || '';
        $('#trip_proxy_from_place').val(fromPlaceAddr);
      }
      var isResetHiddenFromPlace = true;
      try {
        var hiddenFromPlaceJson = JSON.parse(hiddenFromPlaceData);
        if(hiddenFromPlaceJson.address === fromPlaceAddr || hiddenFromPlaceJson.name === fromPlaceAddr) {
          isResetHiddenFromPlace = false;
        }
      }
      catch(e) {
        //hiddenFromPlaceData non-parsable to json
      }
      if(isResetHiddenFromPlace) {
        $('#from_place_object').val('');
      }

      var hiddenToPlaceData = $('#to_place_object').val();
      var toPlaceAddr = $('#trip_proxy_to_place').val();
      if(toPlaceAddr.length === 0) {
        toPlaceAddr = $('#trip_proxy_to_place').attr('last-multi-od-value') || '';
        $('#trip_proxy_to_place').val(toPlaceAddr);
      }
      var isResetHiddenToPlace = true;
      try {
        var hiddenToPlaceJson = JSON.parse(hiddenToPlaceData);
        if(hiddenToPlaceJson.address === toPlaceAddr || hiddenToPlaceJson.name === toPlaceAddr) {
          isResetHiddenToPlace = false;
        }
      }
      catch(e) {
        //hiddenToPlaceData non-parsable to json
      }
      if(isResetHiddenToPlace) {
        $('#to_place_object').val('');
      }

      //parse multi-od places
      var multi_origin_places = [];
      $('#from_places td.address-data').each(function(){
        multi_origin_places.push($(this).textranslate_helper_translate());
      });
      $('#multi_origin_places').val(multi_origin_places.join(';'));

      var multi_dest_places = [];
      $('#to_places td.address-data').each(function(){
        multi_dest_places.push($(this).textranslate_helper_translate());
      });
      $('#multi_dest_places').val(multi_dest_places.join(';'));

      return true;
    });

    $('#legend_label .label-help').removeClass('fa-2x');

  });
