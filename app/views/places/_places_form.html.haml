= form_tag geocode_user_places_path, :remote => true, :id => "query_form" do
  = hidden_field_tag :query
  = hidden_field_tag :target

= form_tag user_place_path(@traveler, 0), :method => :delete, :id => "delete_form" do
  = hidden_field_tag :delete_place_id
  = hidden_field_tag :delete_place_name

= form_tag edit_user_place_path(@traveler, 0), :id => "edit_form", :method => :get do
  = hidden_field_tag :edit_place_id

.row
  .col-sm-12
    = simple_form_for @place_proxy, :url => @place_proxy.id.nil? ? user_places_path(@traveler) : user_place_path(@traveler, @place_proxy.id), :method => @place_proxy.id.nil? ? 'post' : 'put', :html => {:style => "margin-top:10px;margin-bottom:10px;"}  do |f|
      = f.input :raw_address, :class => "inline col-sm-12", :label => translate_helper_translate(:enter_address) do
        = f.text_field :raw_address, :placeholder => translate_helper_translate(:enter_address_or_place), :disabled => ! @place_proxy.can_alter_location, :id => "place_proxy_raw_address", :autocomplete => "off", :class => "ajax-typeahead", :style => "width:300px;", :data => {:link => search_user_places_path, :provide => "typeahead"}
        = image_tag "ajax-loader.gif", :id => "geocoding_indicator", :style => "display:none;margin-top:-9px;", :class => "loading-indicator"

      = f.input :name, :label => translate_helper_translate(:place_name), :placeholder => translate_helper_translate(:new_name), :autocomplete => "off", :input_html => {:style => "width:300px;"}
      = f.input :home, as: :boolean, :label => false, :inline_label => translate_helper_translate(:my_home_chkbox_label)
      = f.hidden_field :place_type_id, :id => "place_type_field"
      = f.hidden_field :place_id, :id => "place_id_field"

      .form-actions
        = button_tag :type => 'submit', :class => "btn action-button" do
          %i.fa.fa-check
          = @place_proxy.id.nil? ? translate_helper_translate(:save) : translate_helper_translate(:update)
        = link_to :back, :class => "cancel_link" do
          %i.fa.fa-reply
          = translate_helper_translate(:cancel)

#select_place{:style => "display:none;"}
  = render :partial => 'trips/alt_address_select', :locals => {:results => [], :type => "place"}

.row
  .col-sm-12
    %h6= translate_helper_translate(:found_x_places, :count => @places.count )

.row
  .places-list.col-sm-12.thumbnail{:style => "height:200px;overflow:auto;"}
    %ul.nav.nav-list
      - @places.each_with_index do |place, index|
        %li.place-list-item
          = link_to "#", :class => "place-select", :data => {:id => "my_place#{index}", :index => index, :place_id => place.id, :op => place.can_delete, :latlon => [place.location.first, place.location.last], :name => place.to_s, :type => "place", :addr => place.address} do
            %img{:src => get_candidate_list_item_image(index, "0")}
            -if place.home
              %i.fa.fa-home
            %strong= place.name
            %em= place.address

.row
  .col-sm-12{:style => "padding-top:5px"}
    = link_to "#", :class => "btn action-button", :id => "delete_button" do
      %i.fa.fa-times
      = translate_helper_translate(:delete)
    = link_to "#", :class => "btn action-button", :id => "edit_button" do
      %i.fa.fa-edit
      = translate_helper_translate(:edit)

:javascript
  // Configure UI behaviors
  var typeahead_delay = +"#{Rails.application.config.ui_typeahead_delay}"
  var typeahead_min_chars = +"#{Rails.application.config.ui_typeahead_min_chars}"
  var typeahead_list_length = +"#{Rails.application.config.ui_typeahead_list_length}"
  var geocoder_min_chars = +"#{Rails.application.config.ui_min_geocode_chars}"
  var delete_message = "#{translate_helper_translate(:confirm_remove_message)}"

  // Hide the name editing div on page load
  $(document).ready(function(){
    // Disable the actions
    $('#delete_button').attr('disabled', 'disabled');
    $('#edit_button').attr('disabled', 'disabled');

    // Hide what we don't need
    $('#select_place').hide();

  });

  // Install a hover event handler for my places. When hovering,
  // the map icon is panned to and the popup shown
  $('.place-select').hover(function() {
    var id = $(this).data('id');
    selectMarkerById(id);
  });

  // Install a click event handler for my places which enables the edit and delete buttons
  $('.place-select').click(function() {
    var id = $(this).data('id');
    selectMarkerById(id);
    // Remove highlights from all the rows and add a highlight
    // to the current row
    $('.place-list-item').removeClass('active');
    $(this).parentranslate_helper_translate().addClass('active');

    // Update the delete and edit forms if the place can be deleted
    var place_id = $(this).data('place-id');
    var place_name = $(this).data('name');
    var op = $(this).data('op');
    if (op) {
      $('#delete_button').removeAttr('disabled');
      $('#delete_place_id').val(place_id);
      $('#delete_place_name').val(place_name);
    } else {
      $('#delete_button').attr('disabled', 'disabled');
      $('#delete_place_id').val("");
      $('#delete_place_name').val("");
    }
    $('#edit_button').removeAttr('disabled');
    $('#edit_place_id').val(place_id);
  });

  // Submit the delete form if the user clicks the delete button
  $('#delete_button').click(function(e) {
    e.preventDefaultranslate_helper_translate();
    if ($('#delete_button').attr('disabled')) {
      return false;
    }
    var message = delete_message + $('#delete_place_name').val() + " ?";
    window.oneclickConfirmBox(message, function(result) {
      if (result) {
        $('#delete_form').submitranslate_helper_translate();
      }
    });
    return false;
  });

  // Move to edit mode if the user clicks the delete button
  $('#edit_button').click(function() {
    if ($('#edit_place_id').val() != "") {
      $('#edit_form').submitranslate_helper_translate();
    }
    return true;
  });

  // Add a change listener on the text field
  $("#place_proxy_raw_address").bind("keyup input paste", function() {
    $('#place_type_field').val("");
    $('#place_id_field').val("");
    $('#select_place').hide();
    removeMatchingMarkers('place');
  });

   // user has lost focus on the address input
  $('#place_proxy_raw_address').blur(function() {
    if ($('#place_type_field').val() == "") {
      // Do an ajax query to geocode the input text
      var addr = $('#place_proxy_raw_address').val().trim();
      if (addr.length >= geocoder_min_chars) {
        $('#query').val(addr);
        $('#target').val(2);
        $('#query_form').submitranslate_helper_translate();
        $('#geocoding_indicator').show();
      }
    }
  });

  var timeout;

  // Enable typeahead for the places forms
  $('#place_proxy_raw_address').typeahead({
      items: typeahead_list_length,
      minLength: typeahead_min_chars,
      source: function(query, process) {
          if (timeout) {
            clearTimeoutranslate_helper_translate(timeout);
          }
          timeout = setTimeoutranslate_helper_translate(function() {
            return $.ajax({
                url: $('#place_proxy_raw_address').data('link'),
                type: 'get',
                data: {
                  query: query
                },
                dataType: 'json',
                success: function(result) {

                  var resultList = result.map(function (item) {
                      var aItem = { index: item.index, type: item.type, id: item.id, name: item.name, desc: item.description, lat: item.lat, lon: item.lon, addr: item.address };
                      return JSON.stringify(aItem);
                  });

                  return process(resultList);
                }
            });
          }, typeahead_delay);
      },
    matcher: function (obj) {
        var item = JSON.parse(obj);
        return ~item.name.toLowerCase().indexOf(this.query.toLowerCase())
    },

    sorter: function (items) {
       var beginswith = [], caseSensitive = [], caseInsensitive = [], item;
        while (aItem = items.shiftranslate_helper_translate()) {
            var item = JSON.parse(aItem);
            if (!item.name.toLowerCase().indexOf(this.query.toLowerCase())) beginswith.push(JSON.stringify(item));
            else if (~item.name.indexOf(this.query)) caseSensitive.push(JSON.stringify(item));
            else caseInsensitive.push(JSON.stringify(item));
        }

        return beginswith.concatranslate_helper_translate(caseSensitive, caseInsensitive)

    },


    highlighter: function (obj) {
        var item = JSON.parse(obj);
        var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
        return item.name.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
            return '<strong>' + match + '</strong>'
        })
    },

    updater: function (obj) {
        var item = JSON.parse(obj);

        // create marker on the map
        removeMatchingMarkers('my_place_candidate');
        create_or_update_typeahead_marker(item, 'my_place_candidate', 'yellowIcon');

        // Update the UI
        $('#place_type_field').attr('value', item.type);
        $('#place_id_field').attr('value', item.id);

        return item.name;
    }
  });

  // Functions
  function create_or_update_typeahead_marker(item, key, iconStyle) {
    marker = create_or_update_marker(key, item.lat, item.lon, item.name, item.desc, iconStyle);
    setMapToBounds();
    selectMarker(marker);
  };

  function create_or_update_marker(key, lat, lon, name, desc, iconStyle) {
    // See if we can find this existing marker
    marker = findMarkerById(key);
    if (marker) {
      removeMarkerFromMap(marker);
    }
    var marker = createMarker(key, lat, lon, iconStyle, desc, name, true);
    addMarkerToMap(marker, true);
    return marker;
  };
  // Add a list of candidate markers to the map
  var alphabet = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Z', 'Y', 'Z'];
  function add_candidate_marker(index, lat, lon, addr, desc, type) {
    var iconStyle;
    var key_template;
    if (type == 'from') {
      iconStyle = 'startCandidate';
      key_template = 'start_candidate';
    } else if (type == 'to') {
      iconStyle = 'stopCandidate';
      key_template = 'stop_candidate';
    } else {
      iconStyle = 'placeCandidate';
      key_template = 'place_candidate';
    }
    var icon = iconStyle + alphabet[index];
    var key = key_template + index;
    var marker = createMarker(key, lat, lon, icon, desc, addr, false);
    addMarkerToMap(marker, true);
  }

  // Add the candidate locations to the map
  function create_candidate_markers() {
    $('.address-select').each(function() {
      var t = $(this);
      var id = t.data('id');
      var index = t.data('index');
      var type = t.data('type');
      var addr = t.data('addr');
      var desc = t.data('desc');
      var latlon = eval(t.data('latlon'));
      add_candidate_marker(index, latlon[0], latlon[1], addr, desc, type);
    });
  };

  // Selects the first matching candidate in the list of alternate
  // addresses.
  function select_first_candidate_address() {
    $('.address-select').each(function(idx) {
      var candidate = $(this);
      select_candidate_address(candidate);
      return;
    });
  };

  // Select a candidate address
  function select_candidate_address(candidate) {
    var id = candidate.data('id');
    var index = candidate.data('index');
    var from_to = candidate.data('type');
    var addr = candidate.data('addr');
    var desc = candidate.data('desc');
    var latlon = eval(candidate.data('latlon'));

    $('#place_proxy_raw_address').val(addr);
    $('#place_id_field').val(index);
    $('#place_type_field').val(4);
    $('#select_place').hide();

    var key = 'place_candidate';
    var iconStyle = 'yellowIcon';

    // Remove any candidate markers from the map
    removeMatchingMarkers(key);
    // replace the markers with the end point marker
    marker = create_or_update_marker(key, latlon[0], latlon[1], addr, desc, iconStyle);
    setMapToBounds();
    selectMarker(marker);
  };
