%h1
  %i{class: "icon #{CsHelpers::ACTION_ICONS[:travel_profile]}"}
  = is_assisting ? "#{@traveler.name}'s #{t(:travel_profile)}" : t(:travel_profile)

%h4
.tabbable
  %ul.nav.nav-tabs
    -# render the first 3 tabs only if the current user is operating as themselves. If they are assisting
    -# another user then we don't render the first 3 tabs
    - if is_assisting == false
      %li
        %a{href: '#tab1', data: {toggle: 'tab', id: '1'}}
          = t(:my_information)
      %li
        %a{href: '#tab2', data: {toggle: 'tab', id: '2'}}
          = t(:buddies) + " (" + current_user.delegates.count.to_s + ")"
      %li
        %a{href: '#tab3', data: {toggle: 'tab', id: '3'}}
          = t(:travelers) + " (" + current_user.travelers.count.to_s + ")"
    %li
      %a{href: '#tab4', data: {toggle: 'tab'}}
        = t(:eligibility)
    %li
      %a{href: '#tab5', data: {toggle: 'tab'}}
        = t(:programs)
    %li
      %a{href: '#tab6', data: {toggle: 'tab'}}
        = t(:accommodations)


  .tab-content
    -# render the first 3 tabs only if the current user is operating as themselves. If they are assisting
    -# another user then we don't render the first 3 tabs
    - if is_assisting == false
      .tab-pane#tab1
        .well#user_info
          = render partial: 'user_info'
      .tab-pane#tab2
        .well#buddies
          = render partial: 'buddies'
      .tab-pane#tab3
        .well#travelers
          = render partial: 'travelers'
    .tab-pane#tab4
      .well#eligibility
        = render partial: 'characteristics/form',  :locals => {:path => user_characteristic_path(@traveler, @user_characteristics_proxy.id), :inline => false}
    .tab-pane#tab5
      .well#programs
        = render partial: 'programs/form',  :locals => {:path => user_program_path(@traveler, @user_programs_proxy.id), :inline => false}
    .tab-pane#tab6
      .well#accommodations
        = render partial: 'accommodations/form',  :locals => {:path => user_accommodation_path(@traveler, @user_accommodations_proxy.id), :inline => false}

:javascript
  
  // UI variables
  var settings_tab_key = "settings_tab_key";

  // Document Ready
  $(document).ready(function(){
    // go to the last selected tab if it exists
    var last_tab = get_ui_key_value(settings_tab_key, null);
    var tab_found = false;
    if (last_tab) {
      var elem = $('a[href=' + last_tab + ']');
      if (elem.length > 0) {
        tab_found = true;
        elem.tab('show');
      }
    } 
    if (tab_found == false) {
      // set the first tab if nothing cached
      var elem = $('a[data-toggle="tab"]').first();
      elem.tab('show');
    }    
  });  
  
  // install an event handler to save the last viewed tab
  $('a[data-toggle="tab"]').on('shown', function (e) {
    set_ui_key_value(settings_tab_key, $(e.target).attr('href'));    
  });

