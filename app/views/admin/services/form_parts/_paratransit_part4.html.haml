- this_path = "admin/services/form_parts/paratransit_part4"
- form_index = 4
- service_id = new_service ? "new-#{mode}" : service.id
- booking_services = BookingServices::AGENCY.sort.map {|k,v| [translate_helper(k), v] }.unshift(["Select a booking service", 'placeholder'])
- fare_types = FareStructure::PARATRANSIT_TYPES.sort.map {|k,v| [translate_helper("#{k.to_s}_fare"), v] }

= simple_form_for service || :service,
        url: service.nil? ? admin_provider_services_path(@provider) : admin_provider_service_path(@provider, service_id),
        remote: true,
        html: { class: 'form-horizontal service-details-form', multipart: true },
        data: {type: :html, "service-id" => service_id, "form-index" => form_index},
        authenticity_token: true,
        wrapper: :horizontal_form do |f|
  = f.error_notification message: print_messages(f)
  = render partial: "admin/services/form_parts/service_details_form_buttons", locals: {f:f}

  -# Hidden Input tells the controller which partial to send back.
  %input.hidden{name: "service_details_partial", type: "text", value: this_path }

  .service-details-container
    = f.input :booking_profile,
      as: :select,
      :collection => booking_services,
      selected: service.booking_profile.nil? ? 'placeholder' : service.booking_profile,
      label_html: { class: "header-label"},
      input_html: { class: "select-booking-profile"}
    = render partial: "admin/services/form_parts/booking_profile_form_ridepilot", locals: {f: f, service: service}
    = render partial: "admin/services/form_parts/booking_profile_form_trapeze", locals: {f: f, service: service}
    = render partial: "admin/services/form_parts/booking_profile_form_ecolane", locals: {f: f, service: service}

:javascript
  $(document).ready(function() {

    // Setup form, setting parameters via (ruby) string interpolation
    var form = new ServiceForm(
      "#{service_id}",
      "#{form_index}",
      ("#{new_service}" === "true"),
      ['.btn-ridepilot-test-connection']
    );

    // Display appropriate booking service form on menu select
    form.$('.select-booking-profile').on('change', function(e) {
      var bs = this.value;
      form.$('.booking-profile-form-container').addClass('hidden');
      form.$(`.booking-profile-form-container.agency-${bs}`).removeClass('hidden');
    });

    // RidePilot Test Connection Button Handler
    form.$('.btn-ridepilot-test-connection').on("click", function(){
      form.$('.btn-ridepilot-test-connection').prop('disabled', true);
      var ridepilot_endpoint = form.$('.input-ridepilot-profile-endpoint').val();
      var ridepilot_api_token = form.$('.input-ridepilot-profile-api-token').val();
      var ridepilot_provider_id = form.$('.input-ridepilot-profile-provider-id').val();

      $.ajax({
        url: '/services/authenticate_booking_settings?booking_profile=' + '#{BookingServices::AGENCY[:ridepilot]}' + '&endpoint=' + ridepilot_endpoint + '&api_token=' + ridepilot_api_token + '&provider_id=' + ridepilot_provider_id,
        method: 'GET',
        success: function(result){
          form.$('.btn-ridepilot-test-connection').prop('disabled', false);
          form.$('.ridepilot-response').text(result['message']);
          form.$('.ridepilot-response').removeClass('hidden');
        },
        error: function(result){
          form.$('.btn-ridepilot-test-connection').prop('disabled', false);
          form.$('.ridepilot-response').text(result['message']);
          form.$('.ridepilot-response').removeClass('hidden');
        }
      });
    });

  });
